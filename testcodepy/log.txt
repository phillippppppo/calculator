test("clicking button updates the state", () => {
  const div = document.createElement("div");
  const root = createRoot(div);
  const { getByText } = testingLibrary.render(<App />);
  
  act(() => {
    root.render(<App />);
  });
  
  // Click a number button
  act(() => {
    getByText("1").click();
  });
  
  expect(div.firstChild.textContent).toEqual("1");
  
  // Click an operation button
  act(() => {
    getByText("+").click();
  });
  
  expect(div.firstChild.textContent).toEqual("1+");
  
  // Click another number button
  act(() => {
    getByText("2").click();
  });
  
  expect(div.firstChild.textContent).toEqual("1+2");
  
  // Click the equals button
  act(() => {
    getByText("=").click();
  });
  
  expect(div.firstChild.textContent).toEqual("3");
});test("should update the state correctly when a number button is clicked", () => {
  const initialState = {
    total: null,
    next: null,
    operation: null,
  };

  const expectedState = {
    total: null,
    next: "5",
    operation: null,
  };

  const buttonName = "5";

  const updatedState = calculate(initialState, buttonName);

  expect(updatedState).toEqual(expectedState);
});
js
test("should update the state correctly when a number button is clicked", () => {
  const initialState = {
    total: null,
    next: null,
    operation: null,
  };

  const buttonName = "5";

  const updatedState = calculate(initialState, buttonName);

  expect(updatedState.next).toBe("5");
});
test("calculate function should return correct result when adding two numbers", () => {
  const result = calculate({ total: "5", next: "2", operation: "+" }, "=");
  expect(result.total).toBe("7");
});

npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.
> calculator@0.1.0 test
> jest && echo 'Tests passed successfully' || echo 'Tests failed'
PASS src/test.test.js
PASS src/copy.test.js
Test Suites: 2 passed, 2 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        2.328 s
Ran all test suites.
'Tests passed successfully' 
test("isNumber function should return true for valid numbers", () => {
  expect(isNumber("123")).toBe(true);
  expect(isNumber("0")).toBe(true);
  expect(isNumber("-12")).toBe(true);
});

test("isNumber function should return false for invalid numbers", () => {
  expect(isNumber("abc")).toBe(false);
  expect(isNumber("12s")).toBe(false);
  expect(isNumber("12.5")).toBe(false);
});


test("isNumber function should return true for valid numbers", () => {
  expect(isNumber("123")).toBe(true);
  expect(isNumber("0")).toBe(true);
  expect(isNumber("-12")).toBe(true);
});

test("isNumber function should return false for invalid numbers", () => {
  expect(isNumber("abc")).toBe(false);
  expect(isNumber("12s")).toBe(false);
  expect(isNumber("12.5")).toBe(false);
});

test("isNumber function should return true for valid numbers", () => {
  expect(isNumber("123")).toBe(true);
  expect(isNumber("0")).toBe(true);
  expect(isNumber("-12")).toBe(true);
});

test("isNumber function should return false for invalid numbers", () => {
  expect(isNumber("abc")).toBe(false);
  expect(isNumber("12s")).toBe(false);
  expect(isNumber("12.5")).toBe(false);
});
test("calculate function returns correct result", () => {
  const result = calculate({ total: "5", next: "2", operation: "+" }, "=");
  expect(result.total).toBe("7");
});

test("isNumber function correctly identifies number", () => {
  const result = isNumber("5");
  expect(result).toBe(true);
});

test("operate function returns correct result for addition", () => {
  const result = operate("2", "3", "+");
  expect(result).toBe("5");
});

test("Button component calls clickHandler correctly", () => {
  const clickHandler = jest.fn();
  const button = testingLibrary.render(<Button name="+" clickHandler={clickHandler} />);
  testingLibrary.fireEvent.click(button.getByText("+"));
  expect(clickHandler).toHaveBeenCalledWith("+");
});

test("Display component renders correct value", () => {
  const display = testingLibrary.render(<Display value="5" />);
  const valueElement = display.getByText("5");
  expect(valueElement).toBeInTheDocument();
});

// Add more test cases if needed
test("Display component renders correct value", () => {
  const display = testingLibrary.render(<Display value="5" />);
  const valueElement = display.getByText("5");
  expect(valueElement).toBeTruthy(); // Change expect to toBeTruthy()
});
npm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.
> calculator@0.1.0 test
> jest && echo 'Tests passed successfully' || echo 'Tests failed'
PASS src/test.test.js
PASS src/copy.test.js
Test Suites: 2 passed, 2 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        2.357 s
Ran all test suites.
'Tests passed successfully' 
test("calculate function clears data when 'AC' button is pressed", () => {
  const result = calculate({ total: "5", next: "2", operation: "+" }, "AC");
  expect(result).toEqual({ total: null, next: null, operation: null });
});

test("isNumber function correctly identifies non-number", () => {
  const result = isNumber("abc");
  expect(result).toBe(false);
});

test("operate function returns correct result for subtraction", () => {
  const result = operate("5", "2", "-");
  expect(result).toBe("3");
});

test("Button component with orange prop has 'orange' class", () => {
  const button = testingLibrary.render(<Button name="+" orange />);
  expect(button.container.firstChild.classList).toContain("orange");
});

test("ButtonPanel component calls clickHandler correctly for digit buttons", () => {
  const clickHandler = jest.fn();
  const buttonPanel = testingLibrary.render(<ButtonPanel clickHandler={clickHandler} />);
  const button = buttonPanel.getByText("7");
  testingLibrary.fireEvent.click(button);
  expect(clickHandler).toHaveBeenCalledWith("7");
});

// Add more test cases if needednpm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.
> calculator@0.1.0 test
> jest && echo 'Tests passed successfully' || echo 'Tests failed'
PASS src/test.test.js
PASS src/copy.test.js
Test Suites: 2 passed, 2 total
Tests:       7 passed, 7 total
Snapshots:   0 total
Time:        2.417 s
Ran all test suites.
'Tests passed successfully' 
test("calculate function correctly handles decimal numbers", () => {
  const result = calculate({ total: "2.5", next: "0.5", operation: "+" }, "=");
  expect(result.total).toBe("3");
});

test("isNumber function correctly identifies negative numbers", () => {
  const result = isNumber("-10");
  expect(result).toBe(true);
});

test("operate function returns correct result for multiplication", () => {
  const result = operate("2", "3", "x");
  expect(result).toBe("6");
});

test("Button component with wide prop has 'wide' class", () => {
  const button = testingLibrary.render(<Button name="0" wide />);
  expect(button.container.firstChild.classList).toContain("wide");
});

test("ButtonPanel component calls clickHandler correctly for AC button", () => {
  const clickHandler = jest.fn();
  const buttonPanel = testingLibrary.render(<ButtonPanel clickHandler={clickHandler} />);
  const button = buttonPanel.getByText("AC");
  testingLibrary.fireEvent.click(button);
  expect(clickHandler).toHaveBeenCalledWith("AC");
});

// Add more test cases if needednpm WARN config global `--global`, `--local` are deprecated. Use `--location=global` instead.
> calculator@0.1.0 test
> jest && echo 'Tests passed successfully' || echo 'Tests failed'
PASS src/copy.test.js
PASS src/test.test.js
Test Suites: 2 passed, 2 total
Tests:       12 passed, 12 total
Snapshots:   0 total
Time:        2.437 s
Ran all test suites.
'Tests passed successfully' 
test("calculate function correctly handles division by zero", () => {
  const result = calculate({ total: "5", next: "0", operation: "Ã·" }, "=");
  expect(result.total).toBe("0");
});

test("isNumber function correctly identifies valid numbers with decimal points", () => {
  const result = isNumber("3.14");
  expect(result).toBe(true);
});

test("operate function returns correct result for division", () => {
  const result = operate("6", "2", "Ã·");
  expect(result).toBe("3");
});

test("Button component with orange prop has 'orange' class", () => {
  const button = testingLibrary.render(<Button name="+" orange />);
  expect(button.container.firstChild.classList).toContain("orange");
});

test("ButtonPanel component calls clickHandler correctly for digit buttons", () => {
  const clickHandler = jest.fn();
  const buttonPanel = testingLibrary.render(<ButtonPanel clickHandler={clickHandler} />);
  const button = buttonPanel.getByText("7");
  testingLibrary.fireEvent.click(button);
  expect(clickHandler).toHaveBeenCalledWith("7");
});

// Add more test cases if needed